openapi: 3.1.0
info:
  title: Sample Pet Store App
  summary: A pet store manager.
  description: This is a sample server for a pet store.
  termsOfService: 'https://example.com/terms/'
  contact:
    name: API Support
    url: 'https://www.example.com/support'
    email: support@example.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.1
jsonSchemaDialect: uri
servers:
  - url: 'https://{username}.gigantic-server.com:{port}/{basePath}'
    description: The production API server
    variables:
      username:
        default: demo
        description: 'this value is assigned by the service provider, in this example `gigantic-server.com`'
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
      basePath:
        default: v2
paths:
  /pets:
    get:
      description: Returns pets based on ID
      summary: Find pets by ID
      operationId: getPetsById
      responses:
        '200':
          description: pet response
          content:
            '*/*':
              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Pet'
          links:
            '*/*':
              operationId: getUserInfo
              parameters:
                key1: value1
                key2: value2
              description: the target link operation
              server:
                url: https://{username}.gigantic-server.com:{port}/{basePath}
                description: The production API server
                variables:
                  username:
                    default: demo
                    description: this value is assigned by the service provider, in this example `gigantic-server.com`
                  port:
                    enum:
                      - 8443
                      - 443
                    default: 8443
                  basePath:
                    default: v2
        default:
          description: error payload
          content:
            text/html:
              schema:
#                $ref: '#/components/schemas/ErrorModel'
    put:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
#            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
#              type: object
#              properties:
#                name:
#                  description: Updated name of the pet
#                  type: string
#                status:
#                  description: Updated status of the pet
#                  type: string
#              required:
#                - status
      responses:
        '200':
          description: Pet updated.
          content:
            application/json: {}
            application/xml: {}
        '405':
          description: Method Not Allowed
          content:
            application/json: {}
            application/xml: {}
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    parameters:
      - name: id
        in: path
        description: ID of pet to use
        required: true
        schema:
#          type: array
#          items:
#            type: string
        style: simple
webhooks:
  newPet:
    post:
      requestBody:
        description: Information about a new pet in the system
        content:
          application/json:
            schema:
#              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
components:
#  schemas:
#    GeneralError:
#      type: object
#      properties:
#        code:
#          type: integer
#          format: int32
#        message:
#          type: string
#    Category:
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#        name:
#          type: string
#    Tag:
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#        name:
#          type: string
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
#        type: integer
#        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
#        type: integer
#        format: int32
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
#            $ref: '#/components/schemas/GeneralError'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://example.org/api/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
security:
  - petstore_auth:
      - 'write:pets'
      - 'read:pets'
tags:
  - name: pet
    description: Pets operations
externalDocs:
  description: Find more info here
  url: 'https://example.com'
